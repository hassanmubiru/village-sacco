// This is an alternative schema configuration using SQLite for development
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// Enums
enum Role {
  MEMBER
  ADMIN
  SUPER_ADMIN
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  LOAN_DISBURSEMENT
  LOAN_REPAYMENT
  FEE
  INTEREST
}

enum LoanStatus {
  PENDING
  APPROVED
  DISBURSED
  REPAYING
  COMPLETED
  REJECTED
  DEFAULTED
}

enum ProposalStatus {
  ACTIVE
  PASSED
  REJECTED
  IMPLEMENTED
}

enum ProposalType {
  LOAN_TERMS
  MEMBERSHIP_REQUIREMENTS
  INTEREST_RATE
  FEE_STRUCTURE
  LEADERSHIP
  OTHER
}

enum VoteOption {
  YES
  NO
  ABSTAIN
}

// Base models
model Member {
  id              String   @id @default(cuid())
  walletAddress   String   @unique
  name            String
  email           String   @unique
  phone           String?
  nationalId      String?  @unique
  isActive        Boolean  @default(true)
  isApproved      Boolean  @default(false)
  role            Role     @default(MEMBER)
  membershipDate  DateTime @default(now())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  savings         Saving[]
  loans           Loan[]
  transactions    Transaction[]
  votes           Vote[]
  proposals       Proposal[]
  adminLogs       AdminLog[]

  @@map("members")
}

model Saving {
  id              String    @id @default(cuid())
  amount          Float
  description     String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  member          Member    @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId        String
  
  @@index([memberId])
  @@map("savings")
}

model Loan {
  id              String      @id @default(cuid())
  amount          Float
  purpose         String
  interestRate    Float       @default(5.0)
  durationMonths  Int
  status          LoanStatus  @default(PENDING)
  approvedBy      String?     // Admin wallet address
  disbursedAt     DateTime?
  dueDate         DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  // Relations
  member          Member      @relation(fields: [memberId], references: [id])
  memberId        String
  repayments      Transaction[] @relation("LoanRepayments")
  
  @@index([memberId])
  @@map("loans")
}

model Transaction {
  id              String          @id @default(cuid())
  amount          Float
  type            TransactionType
  description     String?
  walletAddress   String?         // For blockchain transaction reference
  txHash          String?         // Blockchain transaction hash
  verified        Boolean         @default(false)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  
  // Relations
  member          Member          @relation(fields: [memberId], references: [id])
  memberId        String
  loan            Loan?           @relation("LoanRepayments", fields: [loanId], references: [id])
  loanId          String?
  
  @@index([memberId])
  @@index([loanId])
  @@map("transactions")
}

model Proposal {
  id              String          @id @default(cuid())
  title           String
  description     String
  type            ProposalType
  status          ProposalStatus  @default(ACTIVE)
  votingEndDate   DateTime
  implementedAt   DateTime?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  
  // Relations
  proposer        Member          @relation(fields: [proposerId], references: [id])
  proposerId      String
  votes           Vote[]
  
  @@index([proposerId])
  @@map("proposals")
}

model Vote {
  id              String      @id @default(cuid())
  choice          VoteOption
  createdAt       DateTime    @default(now())
  
  // Relations
  member          Member      @relation(fields: [memberId], references: [id])
  memberId        String
  proposal        Proposal    @relation(fields: [proposalId], references: [id])
  proposalId      String
  
  @@unique([memberId, proposalId])
  @@index([proposalId])
  @@map("votes")
}

// Admin functionality
model AdminLog {
  id              String    @id @default(cuid())
  action          String
  details         String?
  ipAddress       String?
  createdAt       DateTime  @default(now())
  
  // Relations
  admin           Member    @relation(fields: [adminId], references: [id])
  adminId         String
  
  @@index([adminId])
  @@map("admin_logs")
}

model Setting {
  id              String    @id @default(cuid())
  key             String    @unique
  value           String
  description     String?
  lastUpdatedBy   String?   // Admin wallet address
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@map("settings")
}

// Contract data tracking
model ContractSync {
  id                String    @id @default(cuid())
  contractAddress   String    @unique
  lastSyncedBlock   BigInt
  lastSyncedAt      DateTime
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  @@map("contract_syncs")
}
